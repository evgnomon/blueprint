---
- name: Include shared Vars
  include_vars:
    dir: vars/share
  tags:
    - always

- name: Include OS Family Vars
  include_vars:
    dir: vars/{{ ansible_os_family}}
  tags:
    - always

- name: Inflate shared template configs in user home
  include_tasks: j2_inflate.yaml
  vars:
    target: "{{ ansible_env.HOME }}"
  when: item.state == 'file'
  with_filetree: ../templates/share/home
  tags:
    - dotfiles

- name: Inflate template configs in etc for Debian
  include_tasks: j2_inflate.yaml
  vars:
    target: /etc
    become: true
  when: 
    - item.state == 'file'
    - ansible_os_family == "Debian"
  with_filetree: ../templates/{{ ansible_distribution }}/etc
  tags:
    - dotfiles

- name: Check profile picture exists
  stat:
    path: "{{ ansible_env.HOME }}/.ssh/.face"
  register: face_file_stat

- name: Set Gnome avatar
  shell: cp {{ ansible_env.HOME }}/.ssh/.face {{ ansible_env.HOME }}/.face
  args:
    creates: "{{ ansible_env.HOME }}/.face"
  when:
    - ansible_os_family == "Debian"
    - face_file_stat.stat.exists

- name: Include distro tasks
  include_tasks: main-{{ ansible_distribution }}.yaml
  when: ansible_os_family == "Debian"
  tags:
    - always

- name: Install packages using Apt
  become: true
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
    name: "{{ apt_packages.share }}"
    state: present
  when: ansible_os_family == "Debian"
  tags:
    - apt

- name: Install packages using Apt for specific distribution
  become: true
  ansible.builtin.apt:
    name: "{{ apt_packages[ansible_distribution | lower] }}"
    state: present
  when: ansible_os_family == "Debian"
  tags:
    - apt

- name: Build fish shell
  include_tasks:
    file: fish-build.yml
  when: ansible_os_family == "Debian"

- name: Install common Cargo packages
  ansible.builtin.command:
    cmd: "{{ cargo_cmd }} install {{ item }}"
  loop: "{{ common_cargo_packages }}"

- name: Install OS specific Cargo packages
  ansible.builtin.command:
    cmd: "{{ cargo_cmd }} install {{ item }}"
  loop: "{{ cargo_packages | default ([]) }}"

- name: Install using MacPorts
  command: port -N install "{{ item }}"
  when: ansible_distribution == "MacOSX"
  with_items: "{{ macports_packages }}"
  tags:
    - macports

- name: Copy configs
  synchronize:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}"
  loop: "{{ dotfiles }}"
  tags:
    - dotfiles

- name: Change file ownership, group and permissions for gnupg
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.gnupg"
    mode: '0700'
  tags:
    - dotfiles

- name: Install fonts
  include_tasks: fonts_install.yaml

- name: Install common Go packages
  command: go install {{ item }}
  environment:
    CGO_ENABLED: 1
  with_items: "{{ common_go_packages }}"
  tags:
    - go

- name: Install common Node packages
  command: npm install -g {{ item }}
  with_items: "{{ common_node_packages }}"

- name: Clone Git repos
  shell: |
    mkdir -p '{{ repo_dest_dir }}'
    git clone {{ item.url }} '{{ repo_dest }}'
  args:
    creates: "{{ repo_dest }}/.git"
  vars: &git_repos_vars
    repo_hostname: "{{ item.url | urlsplit('hostname') }}"
    repo_path: "{{ item.url | urlsplit('path') | split('/') }}"
    repo_name: "{{ repo_path | last | regex_replace('\\.git$', '') }}"
    repo_parent: "{{ repo_path[1] }}"
    repo_prefix: "{{ item.prefix | default(ansible_env.HOME + '/src') }}"
    repo_rel_dest: "{{ repo_parent }}/{{ repo_name }}"
    repo_dest_default: "{{ repo_prefix }}/{{ repo_hostname }}/{{ item.rewrite | default( repo_rel_dest ) }}"
    repo_dest: "{{ item.dest | default ( repo_dest_default ) }}"
    repo_dest_dir: "{{ repo_dest | dirname }}"
    user_profile_key: "{{ item.profile | default('main') }}"
    user_profile: "{{ profiles[user_profile_key] }}"
    bundle_file: '{{ repo_dest_dir }}/{{ repo_name }}.bundle'
    win_owner: "{{ ansible_nodename | upper }}\\{{ ansible_user_id }}"
  with_items: "{{ git_repos + common_git_repos }}"
  when: ansible_os_family != "Windows"
  ignore_errors: true
  tags:
    - git

- name: Create bundle
  shell: |
    git -C '{{ repo_dest }}' bundle create '{{ repo_name }}.bundle' --all
  vars: *git_repos_vars
  when: ansible_os_family != "Windows"
  with_items: "{{ git_repos + common_git_repos }}"
  tags:
    - git

- name: Make directories in Windows
  ansible.windows.win_powershell:
    script: |
      mkdir -p '{{ repo_dest_dir }}'
    creates: '{{ repo_dest_dir }}'
  vars: *git_repos_vars
  when: ansible_os_family == "Windows"
  ignore_errors: true
  with_items: "{{ git_repos + common_git_repos }}"
  tags:
    - git

- name: Copy bundles to Windows remote
  win_copy:
    src:  '{{ repo_dest | replace(ansible_env.HOME , lookup("env", "HOME")) }}/{{ repo_name }}.bundle'
    dest: '{{ repo_dest_dir }}'
  vars: *git_repos_vars
  ignore_errors: true
  when: ansible_os_family == "Windows"
  with_items: "{{ git_repos + common_git_repos }}"
  tags:
    - git

- name: Clone Git repos in Windows
  ansible.windows.win_powershell:
    script: |
      git clone '{{ bundle_file }}' '{{ repo_dest }}'
      icacls '{{ repo_dest }}' /setowner "{{ win_owner }}" /t /c
      Remove-Item '{{ bundle_file }}'
    creates: '{{ repo_dest }}/.git'
  vars: *git_repos_vars
  when: ansible_os_family == "Windows"
  ignore_errors: true
  with_items: "{{ git_repos + common_git_repos }}"
  tags:
    - git

- name: Fetch Git repos
  shell: |
    git -C '{{ repo_dest }}' fetch --all
  vars: *git_repos_vars
  with_items: "{{ git_repos + common_git_repos }}"
  when: ansible_os_family != "Windows"
  tags:
    - git

- name: Config git profiles
  shell: |
    git -C '{{ repo_dest }}' config user.email '{{ user_profile.useremail }}'
    git -C '{{ repo_dest }}' config user.name '{{ user_profile.fullname | default(user_profile.username) }}'
    git -C '{{ repo_dest }}' config user.signingKey '{{ user_profile.gpg_key }}'
    git -C '{{ repo_dest }}' config commit.gpgsign true
  vars: *git_repos_vars
  with_items: "{{ git_repos + common_git_repos }}"
  when: ansible_os_family != "Windows"
  ignore_errors: true
  tags:
    - git
    - git_config
