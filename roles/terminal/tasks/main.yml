- name: Gather OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family}}.yml"

- name: Install packages using apt
  become: true
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600
    name: "{{ apt_packages }}"
    state: present
  when: ansible_os_family == "Debian"

- name: Build fish shell
  include_tasks:
    file: fish-build.yml
  when: ansible_os_family == "Debian"

- name: Install common Cargo packages
  ansible.builtin.command:
    cmd: "{{ cargo_cmd }} install {{ item }}"
  loop: "{{ common_cargo_packages }}"

- name: Install OS specific Cargo packages
  ansible.builtin.command:
    cmd: "{{ cargo_cmd }} install {{ item }}"
  loop: "{{ cargo_packages | default ([]) }}"

- name: Install using Mac Ports
  command: port -N install "{{ item }}"
  when: ansible_distribution == "MacOSX"
  with_items: "{{ macports_packages }}"

- name: Copy configurations
  synchronize:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}"
  loop: "{{ dotfiles }}"

- file:
    state: directory
    path: "{{ ansible_env.HOME }}/.config/fish/conf.d"

- file:
    state: directory
    path: "{{ ansible_env.HOME }}/.config/alacritty"

- name: Create Alacritty configs
  ansible.builtin.template:
    src: .config/alacritty/alacritty.toml.j2
    dest: "{{ ansible_env.HOME }}/.config/alacritty/alacritty.toml"

- name: Create Alacritty Dekstop file
  ansible.builtin.template:
    src: .local/share/applications/alacritty.desktop.j2
    dest: "{{ ansible_env.HOME }}/.local/share/applications/alacritty.desktop"
  when: ansible_os_family == "Debian"

- stat:
    path: "{{ ansible_env.HOME }}/Library/Fonts/JetBrainsMonoNerdFontMono-Regular.ttf"
  register: font

- file:
    state: directory
    path: "{{ user_fonts_dir }}"

- name: Install JetBrainsMono
  block:
  - get_url:
      url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
      dest: "/tmp/JetBrainsMono.zip"
  - shell:
      cmd: unzip -o /tmp/JetBrainsMono.zip -d "{{ user_fonts_dir }}"
  - file:
      dest: /tmp/JetBrainsMono
      state: directory
  when: not font.stat.exists

- name: Install pip packages for current user
  shell: pip install --upgrade {{ item }}
  with_items: "{{ common_pip_packages }}"

- name: Install common Go packages
  command: go install {{ item }}
  with_items: "{{ common_go_packages }}"

- name: Install common node packages
  command: npm install -g {{ item }}
  with_items: "{{ common_node_packages }}"
