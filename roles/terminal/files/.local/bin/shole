#!/usr/bin/env bash

shole() {
    local file_path=""
    local flag_help=0
    local flag_shell="sh"
    
    # Function to display help
    help() {
        echo "shole: show the contents of a file"
        echo "usage: shole [-h] [-s shell] path"
        echo "  -h, --help  show this help message and exit"
        echo "  -s, --shell shell, shell to use e.g. fish, sh. Default is sh"
        echo "  path, path to the shell script"
        return 0
    }
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                flag_help=1
                shift
                ;;
            -s|--shell)
                if [[ -z "$2" ]]; then
                    echo "shole: error: -s/--shell requires an argument" >&2
                    return 1
                fi
                flag_shell="$2"
                shift 2
                ;;
            -*)
                echo "shole: error: unknown option: $1" >&2
                return 1
                ;;
            *)
                file_path="$1"
                shift
                ;;
        esac
    done
    
    # Show help if requested
    if [[ $flag_help -eq 1 ]]; then
        help
        return 0
    fi
    
    # Check if file path was provided
    if [[ -z "$file_path" ]]; then
        echo "shole: error: the following arguments are required: path"
        return 1
    fi
    
    # Set shell string based on flag
    local shell_str
    case "$flag_shell" in
        fish)
            shell_str="#!/usr/bin/env fish"
            ;;
        python)
            shell_str="#!/usr/bin/env python3"
            ;;
        ruby)
            shell_str="#!/usr/bin/env ruby"
            ;;
        sh|bash)
            shell_str="#!/usr/bin/env bash"
            ;;
        js|node)
            shell_str="#!/usr/bin/env node"
            ;;
        go)
            shell_str='//usr/bin/env go run "$0" "$@"; exit "$?"'
            ;;
        zig)
            shell_str='//usr/bin/env zig run "$0" -- "$@"; exit "$?"'
            ;;
        cpp)
            shell_str='//usr/bin/env g++ -std=c++20 -x c++ -o /tmp/"${0##*/}".out "$0" -lm && /tmp/"${0##*/}".out "$@"; rm -f /tmp/"${0##*/}".out; exit "$?"'
            ;;
        c)
            shell_str='//usr/bin/env gcc -o /tmp/"${0##*/}".out "$0" && /tmp/"${0##*/}".out "$@"; exit "$?"'
            ;;
        csharp|cs)
            shell_str='#!/usr/bin/env dotnet-script'
            ;;
        powershell|pwsh)
            shell_str='#!/usr/bin/env pwsh'
            ;;
        ts)
            shell_str='#!/usr/bin/env bun'
            ;;
        *)
            shell_str="/usr/bin/env bash"
            ;;
    esac
    
    # Create the file with shebang
    echo "${shell_str}" > "$file_path"

    # Make the file executable
    chmod +x "$file_path"
}

shole "$@"
