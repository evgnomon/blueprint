# DO NOT EDIT THIS FILE DIRECTLY.
# This file is auto-generated by Blueprint.

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

BLUE="\[\e[34m\]"    # Blue for path
GREEN="\[\e[32m\]"   # Green for Git branch
RESET="\[\e[0m\]"    # Reset color

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000
HISTFILESIZE=2000000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

# if [ -n "$force_color_prompt" ]; then
#     if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
# 	# We have color support; assume it's compliant with Ecma-48
# 	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
# 	# a case would tend to support setf rather than setaf.)
# 	color_prompt=yes
#     else
# 	color_prompt=
#     fi
# fi

#unset color_prompt force_color_prompt

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Function to abbreviate the current working directory
prompt_abbrev_path() {
  local pwd_length=2  # Number of directories to show fully (adjust as needed)
  local path_max=20   # Maximum length of path (adjust as needed)

  # Replace home directory with ~
  local pwd="${PWD/#$HOME/~}"

  # Split path into components
  IFS='/' read -ra path_components <<< "$pwd"

  # If path is short, return it as is
  if [ ${#path_components[@]} -le $((pwd_length + 1)) ]; then
    echo "$pwd"
    return
  fi

  # Build abbreviated path
  local abbrev_path=""
  local i
  for ((i=0; i<${#path_components[@]}-pwd_length; i++)); do
    if [ -z "${path_components[$i]}" ]; then
      abbrev_path="/"
    else
      abbrev_path="${abbrev_path}${path_components[$i]:0:1}/"
    fi
  done
  # Append the last few components fully
  for ((i=${#path_components[@]}-pwd_length; i<${#path_components[@]}; i++)); do
    abbrev_path="${abbrev_path}${path_components[$i]}/"
  done
  # Remove trailing slash
  echo "${abbrev_path%/}"
}

# Function to get the current Git branch
prompt_git_branch() {
  local branch
  if branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null); then
    if [ "$branch" = "HEAD" ]; then
      branch="detached"
    fi
    echo "($branch)"
  else
    echo ""
  fi
}

export LESS_TERMCAP_mb=$'\e[1;32m'     # begin bold
export LESS_TERMCAP_md=$'\e[1;34m'     # begin blink
export LESS_TERMCAP_me=$'\e[0m'        # reset bold/blink
export LESS_TERMCAP_so=$'\e[01;47;34m' # begin reverse video
export LESS_TERMCAP_se=$'\e[0m'        # reset reverse video
export LESS_TERMCAP_us=$'\e[1;32m'     # begin underline
export LESS_TERMCAP_ue=$'\e[0m'        # reset underline

HISTCONTROL=ignoreboth:erasedups  # Ignore duplicates
shopt -s histappend               # Append to history, don't overwrite
shopt -s cmdhist                  # Save multi-line commands as one
PROMPT_COMMAND='history -a'       # Save history immediately

# Modified prompt
export PS1="${BLUE}\$(prompt_abbrev_path)${GREEN}\$(prompt_git_branch) ‚ùØ ${RESET}"

# Check if ~/.local/bin is in PATH
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
  export PATH="$PATH:$HOME/.local/bin"
fi

FZF_CTRL_R_COMMAND= FZF_ALT_C_COMMAND= eval "$(fzf --bash)"

######################################ENV######################################
if [[ ! -z "$INTERACTIVE_INIT" ]]; then
  return
fi

export INTERACTIVE_INIT=1

export PYENV_SHELL=bash
export PATH="$HOME/.pyenv/bin:$PATH"

# Remove existing pyenv shims from PATH
NEW_PATH=""
IFS=':' read -ra PATH_ARRAY <<< "$PATH"
for p in "${PATH_ARRAY[@]}"; do
    if [[ "$p" != "$HOME/.pyenv/shims" ]]; then
        if [[ -z "$NEW_PATH" ]]; then
            NEW_PATH="$p"
        else
            NEW_PATH="$NEW_PATH:$p"
        fi
    fi
done
PATH="$NEW_PATH"

export PATH="$HOME/.pyenv/shims:$PATH"
export GEM_HOME="$HOME/.gem"
export CODE_HOME="$HOME/src"
export PATH="$GEM_HOME/bin:$PATH"

# Set CDPATH
unset CDPATH
export CDPATH=""
for f in ~/src/*/; do
    if [[ -d "$f" ]]; then
        CDPATH="$CDPATH:$f"
    fi
done

export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export FZF_DEFAULT_COMMAND="fd --type f --strip-cwd-prefix --hidden --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

case "$(uname)" in
    Darwin)
        CDPATH="$CDPATH:/Volumes"
        # macports
        export MACPORTS_HOME="$HOME/.macports"
        export PATH="$HOME/.macports/bin:$PATH"
        export PATH="$HOME/.macports/sbin:$PATH"
        export PKG_CONFIG_PATH="$MACPORTS_HOME/libexec/openssl3/lib/pkgconfig"
        ;;
    Linux)
        CDPATH="$CDPATH:/media/$USER"
        export LIBVIRT_DEFAULT_URI="qemu:///system"
        ;;
esac

eval "$(ssh-agent -s)" > /dev/null
export GPG_TTY=$(tty)
gpg --card-status > /dev/null 2>&1 || true
export EDITOR=vim
export LD_LIBRARY_PATH="$HOME/.pyenv/versions/3.13.7/lib/"
export PATH="$HOME/.local/libexec:$PATH"

if [[ "$(uname -r)" == *"WSL2"* ]]; then
    # Windows WSL2
    export GPG_AGENT_INFO="$HOME/.gnupg/S.gpg-agent:0:1V"
fi

export PATH="$HOME/.rbenv/bin:$PATH"
export PATH="$HOME/.rbenv/shims:$PATH"
export RBENV_SHELL=bash

export PATH="$HOME/.local/bin:$PATH"
